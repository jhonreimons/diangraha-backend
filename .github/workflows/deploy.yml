name: Deploy to Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy code to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "."
          target: "~/diangraha-backend"

      - name: Build and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/diangraha-backend

            echo "=== STAGE 1: Create Environment Config ==="
            cat > .env <<EOL
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            EOL
            echo "‚úÖ Environment config created"

            echo "=== STAGE 2: Stop Old Containers ==="
            docker stop diangraha-backend || true
            docker rm diangraha-backend || true
            echo "‚úÖ Old containers stopped"

            echo "=== STAGE 3: Build JAR Application ==="
            # Simple cleanup
            rm -rf target/ || true
            
            # Build JAR
            ./mvnw clean package -DskipTests
            if [ ! -f "target/diangraha-backend-0.0.1-SNAPSHOT.jar" ]; then
                echo "‚ùå ERROR: JAR file not found!"
                exit 1
            fi
            echo "‚úÖ JAR build successful: $(ls -la target/*.jar)"

            echo "=== STAGE 4: Test JAR Application ==="
            echo "Starting JAR test..."
            timeout 30s java -jar target/diangraha-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=test > jar-test.log 2>&1 &
            JAR_PID=$!
            sleep 15
            
            if ps -p $JAR_PID > /dev/null; then
                echo "‚úÖ JAR application started successfully"
                kill $JAR_PID || true
            else
                echo "‚ùå JAR application failed to start"
                cat jar-test.log
                exit 1
            fi

            echo "=== STAGE 5: Test Database Connection ==="
            # Test connection ke external database
            timeout 20s java -jar target/diangraha-backend-0.0.1-SNAPSHOT.jar \
                --spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }} \
                --spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
                --spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
                --spring.jpa.hibernate.ddl-auto=validate \
                --server.port=8081 > db-test.log 2>&1 &
            DB_TEST_PID=$!
            sleep 10
            
            if ps -p $DB_TEST_PID > /dev/null; then
                echo "‚úÖ Database connection successful"
                kill $DB_TEST_PID || true
            else
                echo "‚ùå Database connection failed"
                cat db-test.log
                exit 1
            fi

            echo "=== STAGE 6: Build Application Container ==="
            docker compose build app --no-cache
            echo "‚úÖ Application container built"

            echo "=== STAGE 7: Deploy Application Container ==="
            echo "Debug: Checking .env file..."
            cat .env
            
            echo "Debug: Testing environment variables..."
            docker compose config
            
            docker compose up -d app
            echo "‚úÖ Application container deployed"
            
            echo "Debug: Checking container environment..."
            docker exec diangraha-backend env | grep SPRING || echo "No SPRING env vars found"

            echo "=== STAGE 8: Monitor Deployment ==="
            echo "Waiting for application to start..."
            sleep 30
            
            echo "=== Container Status ==="
            docker compose ps
            
            echo "=== Application Logs ==="
            docker compose logs app --tail=30
            
            echo "=== Health Check ==="
            echo "Checking if port 8080 is listening..."
            netstat -tlnp | grep 8080 || echo "Port 8080 not listening"
            
            echo "Checking Java processes..."
            ps aux | grep java || echo "No Java processes found"
            
            echo "Testing basic connectivity..."
            curl -v http://localhost:8080/ || echo "Cannot connect to localhost:8080"
            
            for i in {1..10}; do
                if curl -f http://localhost:8080/api/brands > /dev/null 2>&1; then
                    echo "‚úÖ Application is healthy and responding"
                    break
                elif [ $i -eq 10 ]; then
                    echo "‚ùå Application health check failed"
                    echo "=== Full Application Logs ==="
                    docker compose logs app --tail=100
                    echo "=== Container Status ==="
                    docker ps -a
                    echo "=== Port Check ==="
                    netstat -tlnp | grep 8080
                    exit 1
                else
                    echo "Health check attempt $i/10..."
                    sleep 5
                fi
            done

            echo "=== STAGE 9: Final Verification ==="
            echo "Testing Swagger UI..."
            curl -I http://localhost:8080/swagger-ui/index.html || echo "‚ö†Ô∏è  Swagger UI not accessible"
            
            echo "Testing API endpoint..."
            curl -I http://localhost:8080/api/brands || echo "‚ö†Ô∏è  API endpoint not accessible"
            
            echo "üéâ Deployment completed successfully!"