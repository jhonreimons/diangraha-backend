name: Deploy Spring Boot with Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Copy source code to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "."
          target: "~/diangraha-backend"

      - name: Build & Deploy on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/diangraha-backend

            echo "Membuat file .env di server..."
            cat > .env <<EOL
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            EOL

            echo "Stop container lama (kalau ada)..."
            docker compose down || true
            
            echo "Cleanup app container dan image..."
            # Stop dan remove app container jika ada
            docker stop diangraha-backend || true
            docker rm diangraha-backend || true
            
            # Remove app image jika ada
            docker rmi diangraha-backend-app || true
            if [ "$(docker images -q diangraha-backend-app 2> /dev/null)" != "" ]; then
                docker rmi $(docker images -q diangraha-backend-app) || true
            fi

            echo "Cek Java..."
            if ! command -v java &> /dev/null; then
                echo "Java tidak ditemukan, gunakan Docker untuk build..."
                # Build menggunakan Maven Docker image yang benar
                docker run --rm -v "$PWD":/usr/src/app -w /usr/src/app maven:3.9.4-eclipse-temurin-21 mvn clean package -DskipTests
            else
                echo "Java ditemukan, build dengan mvnw..."
                export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
                export PATH=$JAVA_HOME/bin:$PATH
                ./mvnw clean package -DskipTests
            fi
            
            echo "Cek JAR file..."
            if [ ! -f "target/diangraha-backend-0.0.1-SNAPSHOT.jar" ]; then
                echo "ERROR: JAR file tidak ditemukan! Build gagal."
                exit 1
            else
                echo "JAR file berhasil dibuat: $(ls -la target/*.jar)"
            fi

            echo "Jalankan docker compose..."
            docker compose up -d --build
            
            echo "Monitoring deployment..."
            sleep 30
            
            echo "=== Container Status ==="
            docker compose ps
            
            echo "=== App Logs ==="
            docker compose logs app --tail=50
            
            echo "=== MySQL Logs ==="
            docker compose logs mysql --tail=20
            
            echo "=== Network Test ==="
            curl -I http://localhost:8080/swagger-ui/index.html || echo "Swagger not accessible"
            curl -I http://localhost:8080/api/brands || echo "API not accessible"